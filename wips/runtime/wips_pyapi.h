/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by WIPS. Do not attempt to modify manually

#pragma once

//#ifdef WIPS_OPTION_BUILD_PYTHON

#include <Python.h>
#include "wips_runtime.h"

#ifdef __cplusplus
extern "C" {
#endif

#define WIPS_u8     0x00
#define WIPS_i8     0x01
#define WIPS_u16    0x02
#define WIPS_i16    0x03
#define WIPS_u32    0x04
#define WIPS_i32    0x05
#define WIPS_u64    0x06
#define WIPS_i64    0x07
#define WIPS_fp32   0x08
#define WIPS_fp64   0x09
#define WIPS_struct 0x0a

typedef unsigned char wips_type_id;

// wips_PyHandler manages a collection of memory allocated by WIPS with reference counting. In general, whenever a new wips struct pointer is allocated, a new handler is created to handle it.
// Whenever a python object referencing the wips struct or a member of the wips struct is created, that python object
// is passed a pointer to the handler (either directly or through a VLA ref). Making a copy of a struct or VLA creates a new handler
typedef struct wips_handler wips_PyHandler;
typedef struct wips_pytype wips_PyType;
typedef struct wips_pyvla wips_vla_PyObject;

// When the ref counter reaches zero, the destructor will be called on the resource. If the destructor is NULL, the resource will be freed instead
wips_PyHandler* wips_PyHandler_create(void* resource,void (*destructor)(void*));

wips_PyHandler* wips_PyHandler_incref(wips_PyHandler* handler);

wips_PyHandler* wips_PyHandler_decref(wips_PyHandler* handler);

// Holds WIPS type information
struct wips_pytype {
    // Used for primitive types. For primitive types, all function pointers and vlamethod should be NULL
    const wips_type_id type_id;
    // Size of the wips struct in bytes
    const size_t size;
    // The python type corresponding to this wips type
    const PyTypeObject* const python_type;
    // VLA method struct
    const wips_vlamethods_t* const vlamethods;
    // Function pointer to a method that creates a new uninitialized object
    void* (* const creator)(void);
    // Function pointer to a method that wraps an existing wips_struct
    PyObject* (* const wrapper)(void*,wips_PyHandler*);
    // Function pointer to a method which unwraps the c object. This is a NON-OWNING pointer, and should not be freed
    void* (* const unwrapper)(PyObject*);
    void (* const destructor)(void*);
    // Function pointer to a method which creates a deep copy of the c object
    wips_status_t (* const copier)(void*,const void*);
};

extern wips_PyType wips_u8_PyType;
extern wips_PyType wips_i8_PyType;
extern wips_PyType wips_u16_PyType;
extern wips_PyType wips_i16_PyType;
extern wips_PyType wips_u32_PyType;
extern wips_PyType wips_i32_PyType;
extern wips_PyType wips_u64_PyType;
extern wips_PyType wips_i64_PyType;
extern wips_PyType wips_fp32_PyType;
extern wips_PyType wips_fp64_PyType;

typedef struct {
    PyObject_HEAD
    wips_blob_t* c_obj;
} wips_blob_PyObject;

// base class for any python class which wraps a WIPS struct.
typedef struct {
    PyObject_HEAD
    const wips_PyType* wips_type;
    wips_PyHandler* handler;
} wips_struct_PyObject;

struct wips_pyvla {
    PyObject_HEAD
    // The type of the objects contained within the VLA
    wips_PyType* wips_type;
    wips_PyHandler* handler;
    wips_vlaref_t c_vla;
};

wips_vla_PyObject* wips_vla_PyObject_create(wips_PyType* wips_type, wips_PyHandler* handler, wips_vlaref_t c_vla);

extern PyTypeObject wips_blob_PyTypeObject;
extern PyTypeObject wips_struct_PyTypeObject;
extern PyTypeObject wips_vla_PyTypeObject;

#ifdef __cplusplus
}
#endif

//#endif // WIPS_OPTION_BUILD_PYTHON