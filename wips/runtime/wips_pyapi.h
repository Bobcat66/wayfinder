/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by WIPS. Do not attempt to modify manually

#pragma once

#include <Python.h>
#include "wips_runtime.h"

#ifdef __cplusplus
extern "C" {
#endif

// wips_PyHandler manages a collection of memory allocated by WIPS with reference counting. In general, whenever a new wips struct pointer is allocated, a new handler is created to handle it.
// Whenever a python object referencing the wips struct or a member of the wips struct is created, that python object
// is passed a pointer to the handler (either directly or through a VLA ref). Making a copy of a struct or VLA creates a new handler
typedef struct wips_handler wips_PyHandler;

// When the ref counter reaches zero, the destructor will be called on the resource. If the destructor is NULL, the resource will be freed instead
wips_PyHandler* wips_handler_create(void* resource,void (*destructor)(void*));

wips_PyHandler* wips_handler_incref(wips_PyHandler* handler);

wips_PyHandler* wips_handler_decref(wips_PyHandler* handler);

// A struct which allows type-erased manipulation of a VLA. Does not own the VLA, and cannot destroy it
// vlarefs also do not 
typedef struct {
    // Pointer to a pointer to the buffer. Should be a foo_t** casted to void* for a VLA of foo_t
    void* buffer_pt;
    wips_u32_t* vlasize;
    // Pointer to the handler which owns the VLA
    wips_PyHandler* handler;
    // Pointer to a method table which contains methods for manipulating the VLA
    wips_PyVLAMethods* const methods;
} wips_PyVLA;

wips_PyVLA wips_vlaref_create(void* vla_pt, wips_u32_t* vlasize, wips_PyHandler* handler);

// Holds WIPS type information
typedef struct {
    // Size of the wips struct in bytes
    const size_t size;
    // Function pointer to a method that creates a new uninitialized object
    void* (* const creator)(void);
    // Function pointer to a method that wraps an existing wips_struct
    PyObject* (* const wrapper)(void*,wips_PyHandler*);
    void (* const destructor)(void*);
    // Takes a type erased foo_t**, a pointer to the vlasize field, and a pointer to the handler
    wips_PyVLA (* const vla_wrapper)(void*,wips_u32_t*,wips_PyHandler*);
} wips_PyType;

// The pointer returned by this function is owned by the handler and should NOT be freed manually
void* wips_handler_get(wips_PyHandler* handler);

typedef struct {
    PyObject_HEAD
    wips_blob_t* c_obj;
} wips_blob_PyObject;

// base class for any python class which wraps a WIPS struct.
typedef struct {
    PyObject_HEAD
    wips_PyType* wips_type;
    wips_PyHandler* handler;
} wips_PyStruct;

typedef struct {
    PyObject_HEAD
    wips_PyVLA vla;
} wips_vla_PyObject;

PyObject* wips_vla_PyObject_wrap(void* buffer_pt, wips_u32_t* vlasize, wips_PyHandler* handler, wips_PyType* wips_type);

extern PyTypeObject wips_PyBlobTypeObject;

extern PyTypeObject wips_PyObjectTypeObject;

extern PyTypeObject wips_vla_PyTypeObject;

#ifdef __cplusplus
}
#endif