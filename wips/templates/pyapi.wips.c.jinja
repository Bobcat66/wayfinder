/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by WIPS. Do not attempt to modify manually

#ifdef __cplusplus
extern "C" {
#endif

#include "{{ name }}.wips.h"
#include "{{ name }}_pyapi.wips.h"

static void wips_{{ name }}_PyObject_new(PyTypeObject* type, PyObject* args, PyObject* kwds) {
    
    wips_{{ name }}_PyObject* self;

    self = (wips_{{ name }}_PyObject*)(type->tp_alloc(type,0))
    if (self){
        self->c_obj = NULL;
        self->handler = NULL;
    }

    return (PyObject*)self;
}

static int wips_{{ name }}_PyObject_init(PyObject* self, PyObject* args, PyObject* kwds) {

    wips_{{ name }}_PyObject* obj = (wips_{{ name }}_PyObject*)self;

    wips_{{ name }}_t* c_obj = wips_{{ name }}_create();
    if (!c_obj) {
        PyErr_NoMemory();
        return -1;
    }
    wips_handler_t* handler = wips_handler_create((void*)c_obj,wips_{{ name }}_void_destructor);
    if (!handler) {
        PyErr_NoMemory();
        return -1;
    }

    obj->c_obj = c_obj;
    obj->handler = handler;

    return 0;
}

static void wips_{{ name }}_PyObject_dealloc(PyObject* self) {

    wips_{{ name }}_PyObject* obj = (wips_{{ name }}_PyObject*)self;

    if (obj->handler) {
        wips_handler_decref(obj->handler);
        obj->handler = NULL;
        obj->c_obj = NULL;
    }

    Py_TYPE(self)->tp_free(self);

}

void wips_{{ name }}_void_destructor(void* ptr) {
    wips_{{ name }}_destroy((wips_{{ name }}_t*)ptr);
}

#ifdef __cplusplus
}
#endif

