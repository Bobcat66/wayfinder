/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by WIPS. Do not attempt to modify manually

#ifdef WIPS_OPTION_BUILD_PYTHON

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>

#define PY_SSIZE_T_CLEAN
#include <Python.h>

{%- for typename in typenames %}
#include "{{ typename }}_pyapi.wips.h"
{%- endfor %}

static PyMethodDef wips_methods[] = {
    {NULL, NULL, 0, NULL}  // Sentinel
};

static struct PyModuleDef wips_module = {
    PyModuleDef_HEAD_INIT,
    "wips",                     // Module name
    "WIPS binary serde module", // Module documentation
    -1,                         // Size of per-interpreter state or -1
    wips_methods,               // Methods array
    NULL, NULL, NULL, NULL
};

PyMODINIT_FUNC PyInit_wips(void) {
    PyObject *m;

    // Create the module object
    m = PyModule_Create(&wips_module);
    if (!m) return NULL;

    {%- for typename in typenames %}
    if (wips_{{ typename }}_PyObjectType_init(m) < 0) {
        fprintf(stderr,"Failed to initialize {{ typename }}");
        Py_DECREF(m);
        return NULL
    };
    {%- endfor %}

    return m;
}



#ifdef __cplusplus
}
#endif

#endif //WIPS_OPTION_BUILD_PYTHON