/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by WIPS. Do not attempt to modify manually


#include "wips_detail.h"
#include "wips_runtime.h"
#include "{{ name }}.wips.h"
{% if trivial == True %}
DEFINE_TRIVIAL_ENCODE({{ name }})
DEFINE_TRIVIAL_DECODE({{ name }})
{% else %}
size_t wips_encode_{{ name }}(wips_bin_t* data, wips_{{ name }}_t* in) {
    size_t bytesEncoded = 0;
{%- for field in fields -%}
{%- if field.vla == True %}
    for (wips_u32_t i = 0; i < in->GET_DETAIL({{ field.name }},vlasize); i++) {
        bytesEncoded += wips_encode_{{ field.type }}(data, in->{{ field.name }} + i);
    }
{%- elif field.optional == True %}
    if (in->GET_DETAIL({{ field.name }},optpresent)) {
        bytesEncoded += wips_encode_{{ field.type }}(data, &(in->{{ field.name }}));
    }
{%- else %}
    bytesEncoded += wips_encode_{{ field.type }}(data, &(in->{{ field.name }}));
{%- endif %}
{%- endfor %}
    return bytesEncoded;
}
size_t wips_decode_{{ name }}(wips_{{ name }}_t* out, wips_bin_t* data) {
    size_t bytesDecoded = 0;
{%- for field in fields -%}
{%- if field.vla == True %}
    out->{{ field.name }} = malloc(out->GET_DETAIL({{ field.name }},vlasize) * GET_SIZE({{ field.type }}));
    for (wips_u32_t i = 0; i < out->GET_DETAIL({{ field.name }},vlasize); i++) {
        bytesDecoded += wips_decode_{{ field.type }}(out->{{ field.name }} + i, data);
    }
{%- elif field.optional == True %}
    if (out->GET_DETAIL({{ field.name }},optpresent)) {
        bytesDecoded += wips_decode_{{ field.type }}(&(out->{{ field.name }}), data);
    }
{%- else %}
    bytesDecoded += wips_decode_{{ field.type }}(&(out->{{ field.name }}), data);
{%- endif %}
{%- endfor %}
    return bytesDecoded;
}
{%- endif %}