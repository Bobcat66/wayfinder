/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by WIPS. Do not attempt to modify manually

#include "wips_runtime.h"
#include "{{ name }}.wips.h"

#define WIPS_INTERNAL
#include "wips_detail.h"

wips_{{ name }}_t* wips_{{ name }}_create(){
    WIPS_TRACELOG("Creating {{ name }} struct\n");
    wips_{{ name }}_t* struct_ptr = calloc(1,GET_SIZE({{ name }}));
    if (!struct_ptr) {
        WIPS_DEBUGLOG("Error: Failed to allocate {{ name }} struct\n");
        return NULL;
    }
    WIPS_TRACELOG("Created {{ name }} struct\n");
    return struct_ptr;
}
void wips_{{ name }}_free_resources(wips_{{ name }}_t* struct_ptr) {
    WIPS_TRACELOG("Freeing resources held by {{ name }}\n");
{%- if trivial == True %}
{%- else %}
{%- for field in fields %}
{%- if field.vla == True %}
    if (struct_ptr->{{ field.name }}) {
        WIPS_TRACELOG("Freeing {{ name }} field {{ field.name }} ({{ field.type }},VLA,size=%u)\n",struct_ptr->GET_DETAIL({{ field.name }},vlasize));
        for (wips_u32_t i = 0; i < struct_ptr->GET_DETAIL({{ field.name }},vlasize); i++) {
            wips_{{ field.type }}_free_resources(struct_ptr->{{ field.name }} + i);
        }
        free(struct_ptr->{{ field.name }});
    }
{%- elif field.trivial == True %}
{%- else %}
    wips_{{ field.type }}_free_resources(&(struct_ptr->{{ field.name }}));
{%- endif %}
{%- endfor %}
{%- endif %}
    WIPS_TRACELOG("Freed resources held by {{ name }}\n");
}
// Function to destroy the struct and free all resources
void wips_{{ name }}_destroy(wips_{{ name }}_t* struct_ptr) {
    WIPS_TRACELOG("Destroying {{ name }}\n");
    if (!struct_ptr) { return; }
    // Free resources allocated by the struct
    wips_{{ name }}_free_resources(struct_ptr);
    
    // Free the struct itself
    free(struct_ptr);
    WIPS_TRACELOG("Destroyed {{ name }}\n");
}


wips_status_t wips_encode_{{ name }}(wips_bin_t* data, wips_{{ name }}_t* in) {
    WIPS_TRACELOG("Encoding {{ name }}\n");
    WIPS_Assert(data != NULL && in != NULL,0);
    size_t bytesEncoded = 0;
    wips_status_t status;
{%- for field in fields -%}
{%- if field.vla == True %}
    WIPS_TRACELOG("Encoding {{ name }} field {{ field.name }} ({{ field.type }},VLA,size=%u)\n",in->GET_DETAIL({{ field.name }},vlasize));
    for (wips_u32_t i = 0; i < in->GET_DETAIL({{ field.name }},vlasize); i++) {
        status = wips_encode_{{ field.type }}(data, in->{{ field.name }} + i);
        bytesEncoded += status.bytes_processed;
        if (status.status_code != WIPS_STATUS_OK) return wips_make_status(bytesEncoded,status.status_code);
    }
{%- elif field.optional == True %}
    WIPS_TRACELOG("Encoding {{ name }} field {{ field.name }} ({{ field.type }},optional,present=%u)\n",in->GET_DETAIL({{ field.name }},optpresent));
    if (in->GET_DETAIL({{ field.name }},optpresent)) {
        status = wips_encode_{{ field.type }}(data, &(in->{{ field.name }}));
        bytesEncoded += status.bytes_processed;
        if (status.status_code != WIPS_STATUS_OK) return wips_make_status(bytesEncoded,status.status_code);
    }
{%- else %}
    WIPS_TRACELOG("Encoding {{ name }} field {{ field.name }} ({{ field.type }})\n");
    status = wips_encode_{{ field.type }}(data, &(in->{{ field.name }}));
    bytesEncoded += status.bytes_processed;
    if (status.status_code != WIPS_STATUS_OK) return wips_make_status(bytesEncoded,status.status_code);
{%- endif %}
{%- endfor %}
    WIPS_TRACELOG("Encoded {{ name }}\n");
    return wips_make_status(bytesEncoded,WIPS_STATUS_OK);
}
wips_status_t wips_decode_{{ name }}(wips_{{ name }}_t* out, wips_bin_t* data) {
    WIPS_TRACELOG("Decoding {{ name }}\n");
    WIPS_Assert(out != NULL && data != NULL,0);
    size_t bytesDecoded = 0;
    wips_status_t status;
{%- for field in fields -%}
{%- if field.vla == True %}
    WIPS_TRACELOG("Decoding {{ name }} field {{ field.name }} ({{ field.type }},VLA,size=%u)\n",out->GET_DETAIL({{ field.name }},vlasize));
    out->{{ field.name }} = malloc(out->GET_DETAIL({{ field.name }},vlasize) * GET_SIZE({{ field.type }}));
    if (!out->{{ field.name }}){
        WIPS_DEBUGLOG("Fatal error while decoding {{ name }}: OOM\n");
        return wips_make_status(bytesDecoded,WIPS_STATUS_OOM);
    }
    for (wips_u32_t i = 0; i < out->GET_DETAIL({{ field.name }},vlasize); i++) {
        status = wips_decode_{{ field.type }}(out->{{ field.name }} + i, data);
        bytesDecoded += status.bytes_processed;
        if (status.status_code != WIPS_STATUS_OK){
            // Free any partially decoded elements to avoid leaks
            for (wips_u32_t j = 0; j < i; j++) {
                wips_{{ field.type }}_free_resources(out->{{ field.name }} + j);
            }
            free(out->{{ field.name }});
            out->{{ field.name }} = NULL;
            return wips_make_status(bytesDecoded,status.status_code);
        }
    }
{%- elif field.optional == True %}
    WIPS_TRACELOG("Decoding {{ name }} field {{ field.name }} ({{ field.type }},optional,present=%u)\n",out->GET_DETAIL({{ field.name }},optpresent));
    if (out->GET_DETAIL({{ field.name }},optpresent)) {
        status = wips_decode_{{ field.type }}(&(out->{{ field.name }}), data);
        bytesDecoded += status.bytes_processed;
        if (status.status_code != WIPS_STATUS_OK) return wips_make_status(bytesDecoded,status.status_code);
    }
{%- else %}
    WIPS_TRACELOG("Decoding {{ name }} field {{ field.name }} ({{ field.type }})\n");
    status = wips_decode_{{ field.type }}(&(out->{{ field.name }}), data);
    bytesDecoded += status.bytes_processed;
    if (status.status_code != WIPS_STATUS_OK) return wips_make_status(bytesDecoded,status.status_code);
{%- endif %}
{%- endfor %}
    WIPS_TRACELOG("Decoded {{ name }}\n");
    return wips_make_status(bytesDecoded,WIPS_STATUS_OK);
}