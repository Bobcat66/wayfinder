# SPDX-License-Identifier: BSD-3-Clause
#
# Copyright (c) 2025 Jesse Kane
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
---
# represents a pose in SE(3). 
# Encodes a point in R^3 as a 3-vector
# and a rotation in SO(3) as a quaternion.
# in WPILib, this would be represented as a Pose3d
  name: pose3
  fields:
  - name: x
    type: fp64

  - name: y
    type: fp64

  - name: z
    type: fp64

  - name: wq
    type: fp64

  - name: xq
    type: fp64

  - name: yq
    type: fp64
    
  - name: zq
    type: fp64
---
# Represents an object detection, gives both the raw pixel coordinates of the bounding box, as well as the normalized coordinates
# The normalized coordinates can be easily converted to angles from the principal axis of the camera, which can in
# turn be used to compute a rough pose estimate of the object using the pythagorean theorem, assuming the object is on a plane with a known
# height
  name: object_detection
  fields:
  - name: object_class
    type: i32

  - name: confidence
    type: fp32
  
  - name: percent_area
    type: fp32

  - name: topleft_x_pixels
    type: fp64

  - name: topleft_y_pixels
    type: fp64

  - name: bottomright_x_pixels
    type: fp64

  - name: bottomright_y_pixels
    type: fp64

  - name: topleft_x_norm
    type: fp64

  - name: topleft_y_norm
    type: fp64

  - name: bottomright_x_norm
    type: fp64

  - name: bottomright_y_norm
    type: fp64
---
# Represents an apriltag detection
# Encodes the fiducial ID, the corners of the tag in pixels, the decision margin,
# and the hamming distance.
  name: apriltag_detection
  fields:
  - name: fiducial_id
    type: i32

  - name: corner0_x
    type: fp64

  - name: corner0_y
    type: fp64

  - name: corner1_x
    type: fp64

  - name: corner1_y
    type: fp64

  - name: corner2_x
    type: fp64

  - name: corner2_y
    type: fp64

  - name: corner3_x
    type: fp64

  - name: corner3_y
    type: fp64
  
  - name: decision_margin
    type: fp64
  
  - name: hamming_distance
    type: fp64
  
  - name: tag_family_id
    type: u8
---
# Encodes an apriltag pose observation
# computed either with SQPnP (in the multi tag case)
# or with IPPE Square (in the single tag case)
  name: apriltag_field_pose_observation
  fields:
  - name: tags_used
    type: i32
    vla: True

  - name: field_pose_0
    type: pose3

  - name: error_0
    type: fp64

  - name: field_pose_1
    type: pose3
    optional: True

  - name: error_1
    type: fp64
    optional: True
---
# Encodes the pose of an apriltag relative to the camera
# Computed with the SQPnP algorithm
  name: apriltag_relative_pose_observation
  fields:
  - name: fiducial_id
    type: i32

  - name: cam_pose_0
    type: pose3
  
  - name: error_0
    type: fp64
  
  - name: cam_pose_1
    type: pose3
  
  - name: error_1
    type: fp64
---
# Represents the result of a vision pipeline
  name: pipeline_result
  fields:
  - name: timestamp
    type: u64
  
  - name: server_timestamp
    type: i64
  
  - name: pipeline_type
    type: u8
  
  - name: tag_detections
    type: apriltag_detection
    vla: True

  - name: tag_poses
    type: apriltag_relative_pose_observation
    vla: True
  
  - name: field_pose
    type: apriltag_field_pose_observation
    optional: True
  
  - name: object_detections
    type: object_detection
    vla: True
---
# Represents a 3D twist, the derivative of a 3D pose
  name: twist3
  fields:
  - name: dx
    type: fp64
  
  - name: dy
    type: fp64
  
  - name: dz
    type: fp64
  
  - name: rx
    type: fp64
  
  - name: ry
    type: fp64
  
  - name: rz
    type: fp64
---
# Represents a 2D twist, the derivative of a 2D pose
  name: twist2
  fields:
  - name: dx
    type: fp64
  
  - name: dy
    type: fp64
  
  - name: dtheta
    type: fp64
---
# Represents an odometry reading. Each timestamp must correspond exactly to a twist, in their respective order
# (timestamps[0] corresponds to twists[0], timestamps[1] to twists[1], etc.)
  name: odometry_result
  fields:
  - name: timestamps
    type: i64
    vla: True
  
  - name: twists
    type: twist2
    vla: True
---
# Timesync packet
  name: timesync_packet
  fields:
  - name: packet_id # The server tags each packet with a packet id, clients will respond with the last packet ID they have received
    type: u32
  - name: timestamp
    type: i64
  - name: flags
    type: u8