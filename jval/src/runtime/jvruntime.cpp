/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by JVal. Do not attempt to modify manually

#include "jvruntime.hpp"
#include "jvcrt.h"
#include "jvexport.h"
#include <string>
#include <vector>
#include <ranges>
#include <sstream>
#include <format>
// C API
extern "C" {

    struct jval_res {
        char* msg;
        uint8_t status;
    };

    JV_WASM_EXPORT
    void jval_res_destroy(jval_res_t* res_handle) {
        if (res_handle == NULL) return;
        if (res_handle->msg != NULL) free(res_handle->msg);
        free(res_handle);
    }

    JV_WASM_EXPORT
    const char* jval_res_msg(const jval_res_t* res_handle) {
        if (res_handle == NULL) return NULL;
        return res_handle->msg;
    }

    JV_WASM_EXPORT
    uint8_t jval_res_status(const jval_res_t* res_handle) {
        if (res_handle == NULL) return static_cast<uint8_t>(jval::JVStatus::UNKNOWN);
        return res_handle->status;
    }

    JV_WASM_EXPORT
    bool jval_res_ok(const jval_res_t* res_handle) {
        if (res_handle == NULL) return 0;
        return res_handle->status == static_cast<uint8_t>(jval::JVStatus::OK);
    }

}


namespace impl {

    static char* strdup(const char* s) {
        if (!s) return NULL;
        size_t len = strlen(s) + 1;
        char* copy = (char*)malloc(len);
        if (copy) memcpy(copy, s, len);
        return copy;
    }

    static std::string join(const std::deque<std::string>& parts, const std::string& delim) {
        if (parts.empty()) return "";
        return std::accumulate(
            std::next(parts.begin()), parts.end(), parts[0],
            [&delim](const std::string& a, const std::string& b) {
                return a + delim + b;
            }
        );
    }
}

namespace jval {

    std::string JVResult::what() const {
        if (ok()) return "";
        return std::format(
            "{} at /{}",
            jvstatus_name(status_),
            impl::join(path_,"/")
        );
    }

    JVResult JVResult::prependToPath(std::string path_ele) {
        path_.push_front(std::move(path_ele));
        return (*this);
    }

    jval_res_t* JVResult::c_api() {
        jval_res_t* c_res = (jval_res_t*)malloc(sizeof(jval_res_t));
        auto msg = what();
        char* c_msg = msg.empty()
            ? nullptr
            : impl::strdup(msg.c_str());
        c_res->msg = c_msg;
        c_res->status = static_cast<uint8_t>(status_);
        return c_res;
    }


    JVResult JSONStructValidator::operator()(const JSON& jobject) const {
        if (!jobject.is_object()) 
            return JVResult(JVStatus::BAD_TYPE,{});

        // Required fields, dynamically built from the strict requirements as well as the dependencies
        std::unordered_set<std::string> required_fields = required;

        for (const auto& [property,validator] : properties) {
            auto it = jobject.find(property);
            if (it == jobject.end()) {
                if (required_fields.contains(property))
                    return JVResult(JVStatus::MISSING_PROPERTY,{property});
                continue;
            }
            auto res = (*validator)(it.value());
            if (!res) return res.prependToPath(property);
            auto depit = dependencies.find(property);
            if (depit != dependencies.end()) {
                auto deps = depit->second;
                required_fields.insert(deps.begin(),deps.end());
            }
        }

        return JVResult(JVStatus::OK,{});
    }

    JVResult JSONMapValidator::operator()(const JSON& jobject) const {
        if (!jobject.is_object())
            return JVResult(JVStatus::BAD_TYPE,{});
        
        for (const auto& [key,value] : jobject.items()) {
            if (!std::regex_match(key,keyMatcher))
                 return JVResult(JVStatus::SCHEMA_VIOLATION,{key});;
            auto res = (*valueValidator)(value);
            if (!res) return res.prependToPath(key);
        }

        return JVResult(JVStatus::OK,{});
    }

    JVResult JSONArrayValidator::operator()(const JSON& jobject) const {
        if (!jobject.is_array()) 
            return JVResult(JVStatus::BAD_TYPE,{});

        size_t size = jobject.size();
        if (minSize > size || maxSize < size)
            return JVResult(JVStatus::SCHEMA_VIOLATION,{});

        for (size_t i = 0; i < size; ++i) {
            auto res = (*valueValidator)(jobject[i]);
            if (!res) return res.prependToPath(std::to_string(i));
        }
        return JVResult(JVStatus::OK,{});
        
    }

    JVResult JSONEnumValidator::operator()(const JSON& jobject) const {
        if (!jobject.is_string())
            return JVResult(JVStatus::BAD_TYPE,{});
        
        if (!enumValues.contains(jobject.get<std::string>()))
            return JVResult(JVStatus::SCHEMA_VIOLATION,{});
        
        return JVResult(JVStatus::OK,{});
    }

    JVResult JSONUnionValidator::operator()(const JSON& jobject) const {
        for (const auto validator : validators) {
            if (auto res = (*validator)(jobject)) return JVResult(JVStatus::OK,{});;
        }
        return JVResult(JVStatus::SCHEMA_VIOLATION,{});
    }

    JVResult JSONPatternValidator::operator()(const JSON& jobject) const {
        if (!jobject.is_string())
            return JVResult(JVStatus::BAD_TYPE,{});

        std::string value = jobject.get<std::string>();
        if (!std::regex_match(value,patternMatcher))
            return JVResult(JVStatus::SCHEMA_VIOLATION,{});
        return JVResult(JVStatus::OK,{});
    }
}