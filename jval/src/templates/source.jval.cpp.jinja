/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by JVal. Do not attempt to modify manually

#include "jvexport.h"
#include "jvruntime.hpp"
#include "{{ schema.name }}_capi.jval.h"
#include "{{ schema.name }}.jval.hpp"

{%- for include in includes %}
#include "{{ include }}.jval.hpp"
{%- endfor %}

{%- macro render_validator(schema) %}
{%- if schema.type == "integer" %}
static JSONPrimitiveValidator<int> validator;
{%- elif schema.type == "number" %}
static JSONPrimitiveValidator<double> validator;
{%- elif schema.type == "boolean"%}
static JSONPrimitiveValidator<bool> validator;
{%- elif schema.type == "string" %}
static JSONPrimitiveValidator<std::string> validator;
{%- elif schema.type == "array" %}
static JSONArrayValidator validator(
    {{ schema.get("itemsValidator","getNullValidator()") }},
    {{ schema.get("minSize","0") }},
    {{ schema.get("maxSize","array_maxsize") }}
);
{%- elif schema.type == "enum"%}
static JSONEnumValidator validator({
    {%- for value in schema.enumValues %}
    "{{ value }}"{% if not loop.last %}, {% endif %}
    {%- endfor %}
});
{%- elif schema.type == "struct" %}
static JSONStructValidator validator(
    {
        {%- for propertyName,propertyValidator in schema.get("properties",{}).items() %}
        { "{{ propertyName }}", {{ propertyValidator }} }{% if not loop.last %}, {% endif %}
        {%- endfor %}
    },
    {
        {%- for property in schema.get("required",[]) %}
        "{{ property }}"{% if not loop.last %}, {% endif %}
        {%- endfor %}
    },
    {
        {%- for property, dependentReqs in schema.get("dependencies",{}).items() %}
        { "{{ property }}", { "{{ dependentReqs | join("\", \"") }}" } }{% if not loop.last %}, {% endif %} 
        {%- endfor %}
    }
);
{%- elif schema.type == "map" %}
static JSONMapValidator validator(
    {{ schema.get("mapValueValidator","getNullValidator()") }},
    R"({{ schema.get("mapKeys","^.*$")}})"
);
{%- elif schema.type == "union" %}
static JSONUnionValidator validator(
    {
        {%- for schemaValidator in schemasValidators %}
        {{ schemaValidator }}{% if not loop.last %}, {% endif %}
        {%- endfor %}
    }
);
{%- elif schema.type == "pattern" %}
static JSONPatternValidator validator(R"({{ schema.get("regex","(^.*$)") }})");
{%- elif schema.type == "any" %}
static JSONNullValidator validator;
{%- endif %}
{%- endmacro %}

namespace impl {
    using namespace jval;
    {#- Anonymous schemas are given unique mangled names which are hidden from the public API -#}
    {#- The compiler determines all anonymous schemas needed to implement a schema before render time -#}
    {%- for anon in anonymousSchemas %}

    {%- for fwd_decl in anon.fwd_decls %}
    const JSONValidationFunctor* {{ fwd_decl }};
    {%- endfor %}
    const JSONValidationFunctor* get_{{ anon.schema.name }}_validator() {
        {{- render_validator(anon.schema) | indent(8,true) }}
        return static_cast<JSONValidationFunctor*>(&validator);
    }
    {%- endfor %}
}

namespace jval {
    using namespace impl;
    const JSONValidationFunctor* get_{{ schema.name }}_validator() {
        {{- render_validator(schema) | indent(8,true) }}
        return static_cast<JSONValidationFunctor*>(&validator);
    }
}

// C FFI
extern "C" {

    // Returns a dynamically allocated result pointer. The caller is responsible for its destruction
    JV_WASM_EXPORT
    jval_res_t* jval_validate_{{ schema.name }}(const char* json_str) {
        using namespace jval;
        if (!json_str)
            return JVResult(JVStatus::PARSE_ERROR,{}).c_api();

        if (!JSON::accept(json_str))
            return JVResult(JVStatus::PARSE_ERROR,{}).c_api();
        try {
            JSON jobject = JSON::parse(json_str);
            JVResult res = (*get_{{ schema.name }}_validator())(jobject);
            return res.c_api();
        } catch (...) {
            return JVResult(JVStatus::UNKNOWN,{}).c_api();
        }
    }

}