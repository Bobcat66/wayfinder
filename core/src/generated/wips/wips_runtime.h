/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by WIPS. Do not attempt to modify manually

#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stddef.h>

// More user-friendly macro for accessing WIPS details than the ones used internally.
#define GET_WIPS_DETAIL_IMPL(field,detail) DETAIL ## detail ## __ ## field
#define GET_WIPS_DETAIL(wips_struct,field,detail) (wips_struct)->GET_WIPS_DETAIL_IMPL(field,detail)

// Status codes
#define WIPS_STATUS_OK 0x00 // No error
#define WIPS_STATUS_OOM 0x01  // out of memory
#define WIPS_STATUS_BOUNDS_ERROR 0x02 // Out-of-bounds error
#define WIPS_STATUS_OVERFLOW 0x03 // Overflow error
#define WIPS_STATUS_BAD_ASSERT 0x04 // Failed assertion
#define WIPS_STATUS_UNKNOWN 0xFF

typedef uint8_t wips_u8_t;
typedef int8_t wips_i8_t;

typedef uint16_t wips_u16_t;
typedef int16_t wips_i16_t;

typedef uint32_t wips_u32_t;
typedef int32_t wips_i32_t;

typedef uint64_t wips_u64_t;
typedef int64_t wips_i64_t;

typedef float wips_fp32_t;
typedef double wips_fp64_t;

typedef struct wips_bin {
    unsigned char* base;
    size_t offset; // the offset from the base pointer to the part of the wips_bin we actually care about.
    size_t allocated; // The amount of memory allocated
} wips_bin_t;

typedef struct wips_status {
    size_t bytes_processed;
    unsigned char status_code;
} wips_status_t;

static inline wips_status_t wips_make_status(size_t bytes, unsigned char code) {
    wips_status_t s;
    s.bytes_processed = bytes;
    s.status_code = code;
    return s;
}

wips_bin_t* wips_bin_create(size_t size);

wips_bin_t* wips_bin_wrap(unsigned char* base, size_t size);

void wips_bin_destroy(wips_bin_t* bin);

wips_status_t wips_encode_u8(wips_bin_t* data, wips_u8_t* in);
wips_status_t wips_decode_u8(wips_u8_t* out, wips_bin_t* data);

wips_status_t wips_encode_i8(wips_bin_t* data, wips_i8_t* in);
wips_status_t wips_decode_i8(wips_i8_t* out, wips_bin_t* data);

wips_status_t wips_encode_u16(wips_bin_t* data, wips_u16_t* in);
wips_status_t wips_decode_u16(wips_u16_t* out, wips_bin_t* data);

wips_status_t wips_encode_i16(wips_bin_t* data, wips_i16_t* in);
wips_status_t wips_decode_i16(wips_i16_t* out, wips_bin_t* data);

wips_status_t wips_encode_u32(wips_bin_t* data, wips_u32_t* in);
wips_status_t wips_decode_u32(wips_u32_t* out, wips_bin_t* data);

wips_status_t wips_encode_i32(wips_bin_t* data, wips_i32_t* in);
wips_status_t wips_decode_i32(wips_i32_t* out, wips_bin_t* data);

wips_status_t wips_encode_u64(wips_bin_t* data, wips_u64_t* in);
wips_status_t wips_decode_u64(wips_u64_t* out, wips_bin_t* data);

wips_status_t wips_encode_i64(wips_bin_t* data, wips_i64_t* in);
wips_status_t wips_decode_i64(wips_i64_t* out, wips_bin_t* data);

wips_status_t wips_encode_fp32(wips_bin_t* data, wips_fp32_t* in);
wips_status_t wips_decode_fp32(wips_fp32_t* out, wips_bin_t* data);

wips_status_t wips_encode_fp64(wips_bin_t* data, wips_fp64_t* in);
wips_status_t wips_decode_fp64(wips_fp64_t* out, wips_bin_t* data);

void wips_u8_free_resources(wips_u8_t* data);
void wips_i8_free_resources(wips_i8_t* data);
void wips_u16_free_resources(wips_u16_t* data);
void wips_i16_free_resources(wips_i16_t* data);
void wips_u32_free_resources(wips_u32_t* data);
void wips_i32_free_resources(wips_i32_t* data);
void wips_u64_free_resources(wips_u64_t* data);
void wips_i64_free_resources(wips_i64_t* data);
void wips_fp32_free_resources(wips_fp32_t* data);
void wips_fp64_free_resources(wips_fp64_t* data);

#ifdef __cplusplus
}
#endif