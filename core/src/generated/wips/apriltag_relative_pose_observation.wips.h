/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by WIPS. Do not attempt to modify manually

#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#include "wips_runtime.h"
#include "pose3.wips.h"

typedef struct wips_apriltag_relative_pose_observation {
    wips_i32_t fiducial_id;
    wips_fp64_t corner0_x;
    wips_fp64_t corner0_y;
    wips_fp64_t corner1_x;
    wips_fp64_t corner1_y;
    wips_fp64_t corner2_x;
    wips_fp64_t corner2_y;
    wips_fp64_t corner3_x;
    wips_fp64_t corner3_y;
    wips_fp64_t decision_margin;
    wips_fp64_t hamming_distance;
    wips_pose3_t cam_pose_0;
    wips_fp64_t error_0;
    wips_pose3_t cam_pose_1;
    wips_fp64_t error_1;
} wips_apriltag_relative_pose_observation_t;

wips_apriltag_relative_pose_observation_t* wips_apriltag_relative_pose_observation_create();
void wips_apriltag_relative_pose_observation_destroy(wips_apriltag_relative_pose_observation_t* struct_ptr);

wips_i32_t wips_apriltag_relative_pose_observation_get_fiducial_id(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_fiducial_id(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_i32_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_corner0_x(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_corner0_x(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_corner0_y(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_corner0_y(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_corner1_x(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_corner1_x(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_corner1_y(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_corner1_y(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_corner2_x(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_corner2_x(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_corner2_y(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_corner2_y(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_corner3_x(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_corner3_x(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_corner3_y(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_corner3_y(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_decision_margin(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_decision_margin(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_hamming_distance(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_hamming_distance(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_pose3_t wips_apriltag_relative_pose_observation_get_cam_pose_0(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_cam_pose_0(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_pose3_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_error_0(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_error_0(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


wips_pose3_t wips_apriltag_relative_pose_observation_get_cam_pose_1(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_cam_pose_1(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_pose3_t new);


wips_fp64_t wips_apriltag_relative_pose_observation_get_error_1(wips_apriltag_relative_pose_observation_t* struct_ptr);
void wips_apriltag_relative_pose_observation_set_error_1(wips_apriltag_relative_pose_observation_t* struct_ptr, wips_fp64_t new);


size_t wips_encode_apriltag_relative_pose_observation(wips_bin_t* data, wips_apriltag_relative_pose_observation_t* in);
size_t wips_decode_apriltag_relative_pose_observation(wips_apriltag_relative_pose_observation_t* out, wips_bin_t* data);

#ifdef __cplusplus
}
#endif