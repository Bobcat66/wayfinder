/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2025 Jesse Kane
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// This file was automatically generated by JVal. Do not attempt to modify manually

#include "jvexport.h"
#include "jvruntime.hpp"
#include "StreamFormat_capi.jval.h"
#include "StreamFormat.jval.hpp"
#include "ImageEncoding.jval.hpp"

namespace impl {
    using namespace jval;
    const JSONValidationFunctor* get__z42Droot_frameFormat_validator() {        
        static JSONStructValidator validator(
            {
                { "width", getPrimitiveValidator<int>() }, 
                { "height", getPrimitiveValidator<int>() }, 
                { "encoding", get_ImageEncoding_validator() }
            },
            {
                "encoding", 
                "width", 
                "height"
            },
            {
            }
        );
        return static_cast<JSONValidationFunctor*>(&validator);
    }
}

namespace jval {
    using namespace impl;
    const JSONValidationFunctor* get_StreamFormat_validator() {        
        static JSONStructValidator validator(
            {
                { "fps", getPrimitiveValidator<double>() }, 
                { "frameFormat", get__z42Droot_frameFormat_validator() }
            },
            {
                "frameFormat", 
                "fps"
            },
            {
            }
        );
        return static_cast<JSONValidationFunctor*>(&validator);
    }
}

// C FFI
extern "C" {

    // Returns a dynamically allocated result pointer. The caller is responsible for its destruction
    JV_WASM_EXPORT
    jval_res_t* jval_validate_StreamFormat(const char* json_str) {
        using namespace jval;
        if (!json_str)
            return JVResult(JVStatus::PARSE_ERROR,{}).c_api();

        if (!JSON::accept(json_str))
            return JVResult(JVStatus::PARSE_ERROR,{}).c_api();
        try {
            JSON jobject = JSON::parse(json_str);
            JVResult res = (*get_StreamFormat_validator())(jobject);
            return res.c_api();
        } catch (...) {
            return JVResult(JVStatus::UNKNOWN,{}).c_api();
        }
    }

}